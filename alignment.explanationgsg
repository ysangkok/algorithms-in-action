Global alignment of two strings finds the best alignment of the two strings, starting at the beginning of both strings and ending at the ends of both strings.  Any misalignments at the ends count as delections/insertions.

Using similariy as our measure of the difference between the two strings, we are looking for the alignment with the highest similarity between the two strings.  Similarity would obviously be highest where there is a match, which would be a positive number, and lower for mismatches and indels.

We use a dynamic programming algorithms, which is based on the idea that if we know the best alignment up to the (i-1)th position of the alignment, then we can compute the best alignment at the (i)th position.  The similarity value of the alignment at the ith position is the value of the best alignment up to the (i-1)th position, plus the maximum of the the following three situations: the score for aligning the next position in both sequences (matching or mismatching); the score for aligning the next position in string1 against a deletion, or blank, in string2; the score for adding the next position in string2 as an insertion against a blank in string1.  The best value is then inserted into the table of costs.  In addition, a pointer to the previous best position indicates whether the current best position was achieved by a match/mismatch, an insertion, or a deletion.  Where the best score can be achieved in more than one way, multiple pointers are kept.

When we have come to the end of both strings, the similarity of the best alignment(s) is in the cell at table[n,m].  To get the best alignment or alignments, we trace back using the pointers that were inserted during the build process.

Where gaps are modelled as a gap cost plus an extension cost, instead of simply as a series of indels, the algorithm gets much more complicated.  Three arrays must be kept, to keep track of the cost depending on whether we just ended in a no-gap situation, a gap in string1 or a gap in string2.  This is necessary, because a following gap would be costed differently, depending on the previous situation.
