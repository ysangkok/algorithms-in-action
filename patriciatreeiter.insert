$~
//Insert
Insert(PatriciaTree, DataItem)#3
$~{
	$Initialise#3.1
		bitNum = diffBit of head->leftChild;#3.1.1#3.1|
	@
    	$First Pass: Find Differentiating Bit#3.2#During the first traversal of the Patricia Tree, find the item in the Tree whose key is closest to the item being inserted, and determine the most significant bit at which the two keys differ.
        	$Follow links to closest stored key#3.2.1#Efficiency in the Patricia Tree is achieved by only looking at the bits that distinguish between keys. To get the differentiating bit for the key of the item to be inserted, follow down links until an uplink or self referential link is made. Downlinks are links where the child is on a lower level than the parent. Uplinks are where the child is closer to the root than the parent.
			while (downLink)#3.2.1.1#Loop until an uplink or self-link is detected. As long as the differentiating bit of the child is greater than that of the parent, a down link is being followed. For self-referential links, the differentiating bit of the parent and the child is equal, and for uplinks the differentiating bit of the child is less than that of the parent.
			$~{
				$~if (DataItem bitVal at bitNum == 0)#3.2.1.1.1.1#Advance according to the value of the key to be inserted at the bit number designated on the current tree node.
					Advance Left;#3.2.1.1.1.2#Advance according to the value of the key to be inserted at the bit number designated on the current tree node.
				@ 
				$~else#3.2.1.1.1.3#Advance according to the value of the key to be inserted at the bit number designated on the current tree node.
					Advance Right;#3.2.1.1.1.4#Advance according to the value of the key to be inserted at the bit number designated on the current tree node.
				@					
				Get bitNum on path;#3.2.1.1.2#Determine bit number of new tree node, so that we know which bit to look at next.

			@
			}#3.2.1.2#3.2.1|
			$~if (TreeNode.Key == DataItem)#3.2.1.3#The Patricia Tree is a radix data structure, and doesn't handle duplicates well.
				return DUPLICATE;#3.2.1.3.1#3.2.1|3.2|The Patricia Tree is a radix data structure, and doesn't handle duplicates well.
			@
		@
	        $Find Differentiating Bit#3.2.2#Determine the most significant bit at which the key of the item to be inserted differs from the closest stored key.
			Start with Differentiating Bit = MSB#3.2.2.1
            		$~While (DataItem Bit == CompareKey Bit) {#3.2.2.2
                		Advance Differentiaing Bit;#3.2.2.2.1
            		@
			}#3.2.2.3#3.2.2|3.2|
        	@
    	@
	$Second Pass: Insert Item#3.3#Having determined the differentiating bit, a second traversal of the Patricia is performed to find the correct place to insert the item. The item is then linked into the Patricia tree.
	        $Initialise#3.3.1
			bitNum = -1;#3.3.1.2#3.3.1|
        	@
                $Follow down links to insertion point#3.3.2
                        while (downLink AND not past DifferentiatingBit)#3.3.2.1#Traverse tree until an uplink or self referential link shows that a leaf insertion is to be made, or until the tree node differentiating bit is larger than the insertion item differentiating bit, indicating that an internal insertion is to be made.
                        $~{
                                $~if (DataItem bitVal at bitNum == 0)#3.3.2.1.2.1#Advance according to the value of the key to be inserted at the bit number designated on the current tree node.
                                        Advance Left;#3.3.2.1.2.2#Advance according to the value of the key to be inserted at the bit number designated on the current tree node.
                                @
                                $~else#3.3.2.1.2.3#Advance according to the value of the key to be inserted at the bit number designated on the current tree node.
                                        Advance Right;#3.3.2.1.2.4#Advance according to the value of the key to be inserted at the bit number designated on the current tree node.
                                @
                                get bitNum on Path;#3.3.2.1.3#Determine bit number of new tree node, so that we know which bit to look at next.
                        @
                        }#3.3.2.2#3.3.2|
                @
	   	$Link in New Node#3.3.3
			Make New Node containing diffBitPos;#3.3.3.1
			$~if (DataItem at diffBitPos == 0)#3.3.3.3.1#Left child will point to self. Stored key in tree will have a 1 at this position, so right child will point to the stored key.
				Left Child is self-linked;#3.3.3.3.3#Left child will point to self. Stored key in tree will have a 1 at this position, so right child will point to the stored key.
			@
			$~else#3.3.3.3.4#Right child will point to self. Stored key in tree will have a 1 at this position, so left child will point to the stored key.
				Right Child is self-linked;#3.3.3.3.6#Right child will point to self. Stored key in tree will have a 1 at this position, so left child will point to the stored key.
			@
			Link to parent and other child;#3.3.3.4#3.3.3|3.3|Parent must have a link to the new node, and the link to the non-self linked must be made.
		@
 	@
@
}
@
