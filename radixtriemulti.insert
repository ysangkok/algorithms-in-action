$~//Build Radix Trie
Insert(Trie, Item)#3.0
$~{
	$Make new node if Trie is null#3.1#To start a trie, just put the data item in an external node.
		$~if(Trie is null)#3.1.1#If we have nothing, we have to start a trie.
			MakeExternalNodes(Item, Trie);#3.1.1.1#3.1|By putting the data in an external node.
		@
	@
	$Initialisation#3.2#Set level to zero. When level is zero we will look at the first d bits.
		Level = 0;#3.2.2#3.2|
	@

	$Find location for the new Item#3.3#Find the place to insert the new item, by looking at as many bits as are necessary. We look at the bits in group of d bits.
		while (Trie is at Internal Nodes)#3.3.1
		$~{
			$Branch based on bits of item at Level#3.3.1.2#We look at d bits for each level. So for level 0, we look at the first d bits, then at level 1, we look at the next d bits etc. There are 2^d branches at each level. For example, if d = 2, then we look at 2 bits, and there are 2^d = 4 possible branches: 00, 01, 10, 11.
				Get bits of item at Level;#3.3.1.2.1#Get the group of d bits. 
				Move Trie to node based on the bits pattern;#3.3.1.2.2#3.3.1.2|
			@
			Increment Level;#3.3.1.3#Go to the next d bits and the next level in the multi-way trie.
		@
		}#3.3.2#3.3|
	@
	$Link new Item#3.4#Once we have found where to put the item, we need to link it into the existing trie. This will involve making at least one new internal node. Often we will also have to make one or more new internal nodes.
		// Firstly check whether Trie is null or not
		$~if (Trie is at null)#3.4.1
			Make external node for Item;#3.4.1.1#3.4|Where we have come to a null node, we can just make a new external node, since there are not other external nodes along the search path.
		@
		$~else#3.4.2#Where we are at a leaf, there is an existing external node that shares leading bits with the item we need to insert. Therefore, we need to make sure we differentiate the new item from the item already in the trie.
			if (not duplicate Item)#3.4.2.1#Radix methods do not handle duplicate well.
			$~{
				$Make Internal Nodes#3.4.2.1.1#We must have an internal node for each group of d bits where the new key is the same as the existing one.
					Replace existing node with new Internal Node;#3.5.1#First, we change the existing external node to an internal node.	
					while (Bits of ItemKey at Level == Bits of TrieKey at Level)#3.5.2#We must have an internal node for each group of d bits where the new key is the same as the existing one.
					$~{
						Make new node on branch based on Bits Pattern;#3.5.2.1.1
						Increment Level;#3.5.2.1.2
					@
					}#3.5.3#3.4.2.1.1|
				@
				$Make External Nodes for TrieKey;#3.4.2.1.2#As soon as we have found a differentiating bit, we can make external nodes for the new item and for the old item. We position the items depending on their bit patterns.
					Get bits of item at Level;#3.4.2.1.2.1
					Add node based on the bits pattern;#3.4.2.1.2.2#3.4.2.1.2|
				@
				$Make External Nodes for Item;#3.4.2.1.3#As soon as we have found a differentiating bit, we can make external nodes for the new item and for the old item. We position the items depending on their bit patterns.
					Get bits of item at Level;#3.4.2.1.3.1
					Add node based on the bits pattern;#3.4.2.1.3.2#3.4.2.1.3|
				@
				return;#3.4.2.1.4#3.4|
			@	
			} 
			$~else#3.4.2.2#Radix methods do not handle duplicates well.
				return DUPLICATE_ITEM;#3.4.2.2.1#3.4|Radix methods do not handle duplicates well
			@
		@
	@ 
@ 
} 
