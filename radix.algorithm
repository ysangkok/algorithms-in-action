$~RadixExchangeSort(A,left,right,WhichBit)#1#Do radix exchange sort on the array or subarray indicated by the left and right boundaries, starting with the bit indicated (most significant bit for the initial call).
	$~{#2#
	$~if (( right > left ) and ( WhichBit >=0 )) {#3#Terminating condition checks for partition and also for the bit on which partitioning is being done
		$Partition Array on WhichBit#3.1#Partitioning is always done on the current bit. 
			Set index i at left of array, j at right#3.1.1#Initialize pointers to ends of array.
			$~While (i and j Not Equal) {#3.1.2#Pointers i and j will keep incrementing and decrementing respectively, until they meet in the middle of the array.
				$While (WhichBit of item A[i] == 0) keep incrementing i#3.1.2.1#As long as elements on the left side have a 0 in the current bit position, we leave them where they are. We stop the pointer whenever we reach an item with a 1 in the current bit position.
					$~While (WhichBit of item A[i] == 0) and (i < j) {#3.1.2.1.1#As long as elements on the left side have a 0 in the current bit position, we leave them where they are. We stop the pointer whenever we reach an item with a 1 in the current bit position. We check that the i pointer doesn't go off the end of the array, for example if all items have a 0 at the current bit position. 
						keep incrementing i#3.1.2.1.1.1#As long as elements on the left side have a 0 in the current bit position, we leave them where they are. We stop the pointer whenever we reach an item with a 1 in the current bit position. We check that the i pointer doesn't go off the end of the array, for example if all items have a 0 at the current bit position.
					@
					}#3.1.2.1.2#3.1.2.1|
				@
				$While (WhichBit of item A[j] == 1) decrementing j#3.1.2.2#As long as elements on the right side have a 1 in the current bit position, we leave them where they are. We stop the pointer whenever we reach an item with a 0 in the current bit position.
					$~While (WhichBit of item A[j] == 1) and (j > i) {#3.1.2.2.1#As long as elements on the right side have a 1 in the current bit position, we leave them where they are. We stop the pointer whenever we reach an item with a 0 in the current bit position. We check that the j pointer doesn't go off the end of the array, for example if all items have a 1 at the current bit position.
						keep decrementing j#3.1.2.2.1.1#As long as elements on the right side have a 1 in the current bit position, we leave them where they are. We stop the pointer whenever we reach an item with a 0 in the current bit position. We check that the j pointer doesn't go off the end of the array, for example if all items have a 1 at the current bit position.
					@
					}#3.1.2.2.2#3.1.2.2|
				@
				Swap(A[i],A[j]);#3.1.2.3#Both pointers have stopped, because they point to an element that needs to be on the other side of the partition.   By swapping the two elements pointed to, each will now be on the correct side.

			@
			}|
			$If (WhichBit == 0 for every item) Adjust j#3.1.4#In the case of the degerate partition where all items have a 0 at this bit position, j is reset so that the recursive calls, which use j as the boundary, will be correct.
				$~If (WhichBit of item at A[right] == 0) {#999#Degenerate paratition where all items have a 0 at this bit position.
					Increment j#3.1.4.1#In the case of the degerate partition where all items have a 0 at this bit position, j is reset so that the recursive calls, which use j as the boundary, will be correct.
				@
				}#3.1.4.2#3.1.4|3.1|
			@
		@
		$RadixExchangeSort LeftHalf on NextBit#3.2#Recursive call to left half of array, to be partitioned on the next bit.
			RadixExchange(A,left,j-1,WhichBit-1)#3.2.1#3.2|#Recursive call to left half of array, to be partitioned on the next bit.
		@
		$RadixExchangeSort RightHalf on NextBit#3.3#Recursive call to right half of array, to be partitioned on the next bit.
			RadixExchange(A,j,right,WhichBit-1)#3.3.1#3.3|#Recursive call to right half of array, to be partitioned on the next bit. 
		@
	@
	}#4
	@
	}#5
