$~
// Recursive Insertion
InsertKey(PatSubTree, DataItem)#3.4.1
$~{
    CurrBitPos = PatSubTree.DiffBit#3.4.1.0#The most significant bit at which the item to be inserted and the key at the relevant position in the tree differ was determined during the first pass.
    $~if(At Point of Insertion)|if(Gone Past Differentiating Bit OR Followed UpLink)#3.4.1.1#We continue along the search path recursively, until we have reached the appropriate point at which to insert the new item. Uplinks mean we have come to the end of a search path and will mkae a "key insertion" going pat the differentiating bit, that is when the patricia sub tree bit is greater than the differentiating bit we have determined in the first pass, we will make an "internal insertion".
        $insert and return New Node containing DataItem#3.4.1.1.1|3.4.1.1#We continue along the search path recursively, until we have reached the appropriate point at which to insert the new item.
            Make New Node for DataItem#3.4.1.1.1.1#As for all trees, insertion requires making a new node and linking it into the tree appropriately.
            $Assign New Node Children#3.4.1.1.1.2#As for all trees, insertion requires making a new node and linking it into the tree appropriately.
                if(DataItem bit at DifferentiatingBit == 0)#3.4.1.1.1.2.1#As for all trees, insertion requires making a new node and linking it into the tree appropriately.
                $~{
                    New Node LeftChild = Self#3.4.1.1.1.2.1.1#As for all trees, insertion requires making a new node and linking it into the tree appropriately.
                    New Node RightChild = PatSubTree#3.4.1.1.1.2.1.2#3.4.1.1.1.2|3.4.1.1.1|As for all trees, insertion requires making a new node and linking it into the tree appropriately.
                @
                }
                else#3.4.1.1.1.2.2#As for all trees, insertion requires making a new node and linking it into the tree appropriately.
                $~{
                    New Node RightChild = Self#3.4.1.1.1.2.2.1#As for all trees, insertion requires making a new node and linking it into the tree appropriately.
                    New Node LeftChild  = PatSubTree#3.4.1.1.1.2.2.2#3.4.1.1.1.2|3.4.1.1.1|As for all trees, insertion requires making a new node and linking it into the tree appropriately.
                @
                }
            @
            return New Node#3.4.1.1.1.3#As for all trees, insertion requires making a new node and linking it into the tree appropriately.
        @
    @
    else|else //branch according to differentiating bit of subtree root#3.4.1.2#We continue along the search path recursively, until we have reached the appropriate point at which to insert the new item.
    $~{
        $Continue recursive search for insertion point#3.4.1.2.1#We continue along the search path recursively, until we have reached the appropriate point at which to insert the new item.
            $~if(DataItem bit at CurrBitPos == 0)#3.4.1.2.1.2#3.4.1.2.1|Which link to follow to get to the next level of the tree is determined by the value of the bit in the insert key currently being examined (left if 0, right if 1). The next bit of the insert key to be examined is determined by the bit indicated in the current node in the Patricia Tree.
                LeftChild = InsertKey(LeftChild,DataItem)#3.4.1.2.1.2.1#Which link to follow to get to the next level of the tree is determined by the value of the bit in the insert key currently being examined (left if 0, right if 1). The next bit of the insert key to be examined is determined by the bit indicated in the current node in the Patricia Tree.
            @
            else RightChild = InsertKey(RightChild,DataItem)#3.4.1.2.1.3#Which link to follow to get to the next level of the tree is determined by the value of the bit in the insert key currently being examined (left if 0, right if 1). The next bit of the insert key to be examined is determined by the bit indicated in the current node in the Patricia Tree.
            return PatSubTree#3.4.1.2.1.4
        @
    @}
@
}#3.4.1.3b
@
