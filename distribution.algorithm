$~Distribution Counting ()#0#   
$~{#999#  
	$Record cumulative counts#1#A count of the number of times each key occurs is taken.  Then the counts are added to form cumulative counts, which can be to show where the item should be in the final, sorted array.
		$Initialize count array#1.1#Initially all counts are 0.
			$~for (j=0; j<alphsize; j++) {#1.1.1#Initially all counts are 0
				count[j] = 0;#1.1.1.1#Initially all counts are 0
			@
			}#1.1.2#1.1|
		@            
		$Get counts#1.2#Count the number of occurrences of each key.
			$~for (i=0; i<N; i++) {#1.2.1#Make one pass through the file.  For each item, increment the counter that counts its number of occurrences.  The counter is in the auxiliary array, indexed by the key.
				count[a[i]]++;#1.2.1.1#Make one pass through the file.  For each item, increment the counter that counts its number of occurrences.  The counter is in the auxiliary array, indexed by the key.
			@
			}#1.2.2#1.2|
		@
		$Get cumulative counts#1.3#To use the counters as indices into the final array, we need to add the counters across the count array.
			$~for (j=1; j<alphsize; j++) {#1.3.1#To use the counters as indices into the final array, we need to add the counters across the count array.
				count[j] = count[j-1] + count[j];#1.3.1.1#To use the counters as indices into the final array, we need to add the counters across the count array.
			@
			}#1.3.2#1.3|
		@
		$Shuffle Right#1.4#We convert the cumulative counts to array indices by shuffling right.  This step is necessary because items with the first key will start at array index 0, and items with the second key will start at the array position equal to the number of items with the first key, etc. 
 			$~for (j=alphasize -1; j > 0; j--) {#1.4.1#We convert the cumulative counts to array indices by shuffling right.  This step is necessary because items with the first key will start at array index 0, and items with the second key will start at the array position equal to the number of items with the first key, etc.
				count [j] = count [j-1];#1.4.1.1#We convert the cumulative counts to array indices by shuffling right.  This step is necessary because items with the first key will start at array index 0, and items with the second key will start at the array position equal to the number of items with the first key, etc.
			@
			}
			count [0] = 0;#1.4.2#1.4|1|The first key will start at position 0 in the sorted array.
		@
	@
	$For each item in array#2#Here we start transcribing each item to its final position, as indicated by the count array.  
		for(i=0; i < N; i++)#2.1#2|Here we start transcribing each item to its final position, as indicated by the count array.  
	@
	$~{#3#
			$Copy to final position indicated by count array#3.1#Use count array as index into final, sorted array.
			$Copy item to final position in auxiliary array#3.1.1#Use count array as index into final, sorted array.
				b[count[a[i]] = a[i];#3.1.1.1#3.1.1|3.1|a[i] is the key of item i; count[a[i]] is the current cumulative counter for key a[i] and also the index of a[i] in the final, sorted array.
			@
		@
		$Adjust cumulative counter#3.2#The next item with this key will go in at the next slot.
			$increment count[item]#3.2.1#The next item with this key will go in at the next slot.
				count[a[i]]++;#3.2.1.1#3.2.1|3.2|The next item with  key a[i] will go in at the adjacent slot, so we increment the current cumulative counter for a[i].
			@
		@
	@
	}#4#
	$Copy auxiliary array back to original array#5#Distribution counting uses an auxiliary array to copy into, so at the end, we need to copy things back to the original array.
		$~for (i=0; i<N; i++) {#5.1#Just a straight copy, item by item.
			a[i] = b[i];#5.1.1#Just a straight copy, item by item.
		@
		}#5.2#5|
	@
@
}#6#
@
