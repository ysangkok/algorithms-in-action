$~Insert(BinSearchTree, DataItem) #2.1.0#Insert item into new node in the Binary Search Tree.
$~{
     $Initialize Ptr to Root#2.1.1#Start by setting pointer to root pointer pointer.
          Ptr=Parent=Root;#2.1.1.1#2.1.1|Start by setting pointer to root pointer. Pointer marks the search position. Parent pointer trails behind so we can insert.
     @
     $Find Location for New DataItem#2.1.2#Advances pointer and parent pointer along the search path until pointer is at a null node. If the search path is corrrect, then the parent pointer now marks the place to insert the new item.  
         While(Ptr Not Null)#2.1.2.1
         $~{
              Parent = Ptr;#2.1.2.1.1#Advances parent pointer along search path.
              $~if(less(DataItem, ptr->item))#2.1.2.1.2#Compare data item and data pointed to by the pointer.
                  Ptr = Ptr->lchild;#2.1.2.1.2.1#2.1.2.1|Item key is less, so follow the left child on the search path.
              @
              $~else#2.1.2.1.3#Item key is greater than or equal to the data pointed by the pointer.
                  Ptr = Ptr->rchild;#2.1.2.1.3.1#2.1.2.1|Item key is greater or equal, so follow the right child of the search path.
              @
         @
         }#2.1.2.2#2.1.2|
     @
     $Link New DataItem#2.1.3#Create a new node containing the data item and link into the tree using parent pointer. Check whether the new node should be left or right child of the parent node.
         $~if(less(DataItem, Parent->Key))#2.1.3.1#Compare data item and data pointed to by the parent pointer.
             Parent->lchild = newnode(DataItem);#2.1.3.1.1#2.1.3|Item key is less, so should be left child of parent.
         @
         $~else#2.1.3.2#Item key is greater than data pointed to by the parent pointer.
             Parent->rchild = newnode(DataItem);#2.1.3.2.1#2.1.3|Item key is greater or equal, so should be right child of parent.
         @
     @
@
}
@
