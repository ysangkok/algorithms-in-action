$~#
// Recursive search for a possible key
SearchKey(PatriciaTree,DataItem,TreeBitPos)#5.1
$~{
    $~if(uplink followed)#5.1.1#An uplink means the search has ended, that is the downward search path is null.
        return Stored Key#5.1.1.1#An uplink means the search has ended, that is the downward search path is null.
    @
    else#5.1.2#As long as we are still following downlinks, we make successive recursive calls to the search function.
    $~{
        $~if(DataItem bit at TreeBitPos == 0)#5.1.3#As long as we are still following downlinks, we make successive recursive calls to the search function. Which link to follow to get to the next level of the tree is determined by the value of the bit in the search key currently being examined (left if 0, right if 1). The next bit of the search key to be examined is determined by the bit indicated in the current node in the patricia tree.
            return SearchKey(LeftChild,DataItem,TreeBitPos)#5.1.3.1#As long as we are still following downlinks, we make successive recursive calls to the search function. Which link to follow to get to the next level of the tree is determined by the value of the bit in the search key currently being examined (left if 0, right if 1). The next bit of the search key to be examined is determined by the bit indicated in the current node in the patricia tree.
        @
        else return SearchKey(RightChild,DataItem,TreeBitPos)#5.1.4#As long as we are still following downlinks, we make successive recursive calls to the search function. Which link to follow to get to the next level of the tree is determined by the value of the bit in the search key currently being examined (left if 0, right if 1). The next bit of the search key to be examined is determined by the bit indicated in the current node in the patricia tree.
    @}
@
}
@
