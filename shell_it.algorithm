$~ShellSort(A,Size)#1#Shellsort works on a similar principle to insertion sort, but uses larger jumps in the initial stages.  For successively smaller values of h, we h-sort the file.  That is, we end up with h interleaved subfiles.  Within each subfile, all elements h positions away from each other are in sorted order relative to each other.
$~{#2
	$Pick starting value for h#3#The choice of starting h and decrement are somewhat arbitrary.
	// One way:#4#The choice of starting h and decrement are somewhat arbitrary.
	for(h=1;h<=Size/4;h=3*h+1);#5#3|The choice of starting h and decrement are somewhat arbitrary.
	@
	$for progressively smaller h#6#Starting with some h, we h-sort the file with progressivley smaller values of h.  Successive h-values should be relatively prime.  The last value for h is 1, leading to (linear) insertion sort of an almost-sorted file.
	for(starting h;h>0;h/=3)#7#6|Starting with some h, we h-sort the file with progressivley smaller values of h.  Successive h-values should be relatively prime.  The last value for h is 1, leading to (linear) insertion sort of an almost-sorted file.
	@
        $~{#7.1
		$Insertion-like sort using step of size h#7.2#Each pass at h-sorting is like insertion sort, except that we look at elements h positions away from each other, instead of one position away 
		//One way: nested loops#7.3#Using nested loops, the outer loop will go through each of the h interleaved subfiles starting at positions 0 through h-1, and h-sort each of them all the way to the end of the file.
		$for(SubfileStart=0;SubfileStart<h;SubfileStart++)#7.4#Using nested loops, the outer loop will go through each of the h interleaved subfiles starting at positions 0 through h-1, and h-sort each of them all the way to the end of the file.
		for(FirstPos=0;FirstPos<h;FirstPos++)#7.5#7.4|Using nested loops, the outer loop will go through each of the h interleaved subfiles starting at positions 0 through h-1, and h-sort each of them all the way to the end of the file.
		@
                $~{
			$h-sort Subfile#7.5.1#h-sort by performing insertion-like sort, using intervals of h, instead of 1, between the elements being compared
			for(i=FirstPos+h;i<Size;i+=h)#7.5.2#The second element in the interleaved subfile will be h positions away from the first. Starting with this second element, up to the last element, we make sure the element being examined is correctly placed relative to all the elements in the same subfile that come before it.#We do not look at the first element, since it is already correctly placed in the subfile consisting of itself and the elements before it.#When we get to the last element the subfile will be sorted.
			$~{#7.5.3
				val=A[i];#7.5.3.1#Save the value being looked at, so we can move elements into its place if required 
				j=i;#7.5.3.2#We are looking only at elements before the current one
				while(A[j-h]>val && j>=h)#7.5.3.3#All elements that are greater than the element being inserted will have to be moved rightward so that the current element can be inserted. We deal with each subfile independently, and so move in jumps of size h.
				$~{#7.5.3.4
					A[j] = A[j-h];#7.5.3.4.1#Because each subfile is being processed independently, we move each element h places rightward.
					j-=h;#7.5.3.4.2#Because each subfile is being processed independently, we examine only element separated by h places.
				@
				}#7.5.3.5
				A[j]=val;#7.5.3.6#7.5.1|When we stop moving elements, all elements larger than the current one are positioned to the right of the pointer and all smaller than the current elements are to the left. So we insert the current element into its correct place.
			@
			}#7.5.4#7.5.1|
			@	
                @
                }#7.6#7.2|
		@
	@
        }#8#2|1
	
	
@
}#9
@
