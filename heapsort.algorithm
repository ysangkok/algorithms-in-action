$~ HeapSort ()#0
	$~ {
		$Create Heap From UnsortedArray#1#The first step is to create a data structure in which the largest element is always accessible in constant time.  The heap is a tree in which the largest element is always at the root.  The tree is represented as an array.
			// Bottom Up Heap Construct ();#1.0#Bottom up heap construction runs in O(n) time, and is more efficient than inserting the items into the heap one at a time.  We start by simply putting the items to be sorted into an array, without regard to order.
			$for k = last non-leaf node to k = root#1.1#
			for (k = N/2; k >= 1; k--) #1.1.1#1.1|Starting on the second from bottom level of the tree, we form subheaps of size 3.  The downheap operation ensures that the heap condition is met.#When we move up to the next level, we join these subheaps into larger subheaps of size 7, and continue in this manner until we reach the root.#For element k, the downheap operation on the subheap rooted at k is O(floor log n/k).
			@
			$~{
				$DownHeap (N,k)#1.2#Starting on the second from bottom level of the tree, we form subheaps of size 3.  The downheap operation ensures that the heap condition is met for each of these subtrees.#When we move up to the next level, we join these subheaps into larger subheaps of size 7, and continue in this manner until we reach the root.#For element k, the downheap operation on the subheap rooted at k is O(floor log n/k).#At the time that downheap() acts on any given subtree, we do not know whether the root of the subtree is in the correct position.  We do, however, know that the subtrees rooted at the children of this node are already in heap order.
					i = k;#1.2.1#Set index i to the root of the subtree that we are now going  to examine.
					$~While (A[i] not Leaf) {#1.2.2#We continue downheap until the node in question and its children are in the correct order.  At that point we can stop, because we know that subtrees lower down  already meet the heap condition.
						j = GetIndexOfLargestChild (k);#1.2.1.2#We only need to check the relationship of the root to one of its children - the larger.  If this relationship is correct, then the relationship to the smaller child is also correct.  If it is not correct, then we will perform a swap, such that the larger child will become the parent of the smaller child and the root.
						if (A[i] >= A[j]) then break;#1.2.1.3#We continue downheap until the node in question and its children are in the correct order.  At that point we can stop, because we know that subtrees lower down  already meet the heap condition.
						swap (A[i],A[j])#1.2.1.5#If the heap condition is not met, because the largest child is larger than the root of this subtree, we restore the heap condition by swapping the largest child with the root.
						i = j;#1.2.1.6#Continue down the tree, checking the heap condition and restoring the correct order.  The subtree now being checked is has as its root the element just swapped into place.
					@
					}#1.2.3#1.2|
				@
			@
			}#1.a#1|
		@
		$ while (Not Finished) #3#We look at the elements one-by-one, until the whole collection is sorted.
		  	while (N > 1)#3.0#3|We look at the elements one-by-one, until the whole collection is sorted.
		@
		$~{
				$Swap (Largest In Heap,Element In Nth Position);#3.1#The first step in the loop is to swap the largest element, which is at the root of the tree (and the first position of the array) with the last item in the array (tree). 

					Swap (A[1],A[N]);#3.1.1#3.1|The first step in the loop is to swap the largest element, which is at the root of the tree (and the first position of the array) with the last item in the array (tree).  This large element is now in its final position, and so will not be moved again.
				@
				$Remove Nth Position From Further Consideration;#3.2#The Nth element is now in its final position, and so will not be moved again.
					N--;#3.2.1#3.2|The Nth element is now in its final position, and so will not be moved again.
				@
				$Restore Heap Order;#3.3#The swap has disturbed the heap condition, so we must now make changes to ensure that the tree meets the heap condition once again.
					$Downheap (N,1)#3.3.1#After the swap, the part of the heap still under consideration needs to be reformed. The downheap operation makes sure that the heap condition is still met, and takes O(log n) time.
					i = 1;#3.3.1.1#Since we have changed the root, we need to start the downheap operation at the top of the tree
					$~While (A[i] not Leaf) {#3.3.1.2#We continue downheap until the node in question and its children are in the correct order.  At that point we can stop, because we know that subtrees lower down  already meet the heap condition.
						j = GetIndexOfLargestChild (i);#3.3.1.2.1#We only need to check the relationship of the root to one of its children - the larger.  If this relationship is correct, then the relationship to the smaller child is also correct.  If it is not correct, then we will perform a swap, such that the larger child will become the parent of the smaller child and the root.
						if (A[i] >= A[j]) then exit break;#3.3.1.2.2##We continue downheap until the node in question and its children are in the correct order.  At that point we can stop, because we know that subtrees lower down  already meet the heap condition.
						swap (A[i],A[j]);#3.3.1.2.4#If the heap condition is not met, because the largest child is larger than the root of this subtree, we restore the heap condition by swapping the largest child with the root.
						i = j;#3.3.1.2.5#Continue down the tree, checking the heap condition and restoring the correct order.  The subtree now being checked is has as its root the element just swapped into place.
					@
					}#3.3.1.2.6#3.3.1|3.3|
					@

				@
			@
			}
		@
	return;#4#Finished!
	@
	}
@


